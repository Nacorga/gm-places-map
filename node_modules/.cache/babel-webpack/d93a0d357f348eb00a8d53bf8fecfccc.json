{"ast":null,"code":"import { GoogleMap, MapInfoWindow } from '@angular/google-maps';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/google-maps\";\nimport * as i2 from \"@angular/common\";\n\nfunction GmMapComponent_map_marker_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"map-marker\", 4, 5);\n  }\n\n  if (rf & 2) {\n    const marker_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"position\", marker_r2.position)(\"options\", marker_r2.options);\n  }\n}\n\nconst MAP_OPTS = {\n  mapTypeId: '',\n  zoomControl: false,\n  scrollwheel: false,\n  disableDoubleClickZoom: true,\n  draggable: false,\n  fullscreenControl: false,\n  mapTypeControl: false,\n  streetViewControl: false,\n  maxZoom: 16\n};\nexport let GmMapComponent = /*#__PURE__*/(() => {\n  class GmMapComponent {\n    constructor() {\n      this._markers = [];\n      this.options = MAP_OPTS;\n      this.infoContent = '';\n      this.loading = true;\n    }\n\n    set markers(markers) {\n      this._markers = markers;\n      this.fitBounds();\n    }\n\n    get markers() {\n      return this._markers;\n    }\n\n    set map(map) {\n      this._map = map;\n    }\n\n    get map() {\n      return this._map;\n    }\n\n    fitBounds() {\n      if (this.map && this.markers.length > 0) {\n        this.bounds = new google.maps.LatLngBounds();\n        this.markers.forEach(elem => this.bounds.extend(new google.maps.LatLng(elem.position.lat, elem.position.lng)));\n        this.map.fitBounds(this.bounds);\n      }\n    }\n\n  }\n\n  GmMapComponent.ɵfac = function GmMapComponent_Factory(t) {\n    return new (t || GmMapComponent)();\n  };\n\n  GmMapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GmMapComponent,\n    selectors: [[\"app-gm-map\"]],\n    viewQuery: function GmMapComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(GoogleMap, 5);\n        i0.ɵɵviewQuery(MapInfoWindow, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.map = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.info = _t.first);\n      }\n    },\n    inputs: {\n      markers: \"markers\"\n    },\n    decls: 4,\n    vars: 5,\n    consts: [[1, \"gm-map\"], [\"mapContainer\", \"\"], [3, \"height\", \"width\", \"center\", \"options\"], [3, \"position\", \"options\", 4, \"ngFor\", \"ngForOf\"], [3, \"position\", \"options\"], [\"markerElem\", \"\"]],\n    template: function GmMapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵelementStart(2, \"google-map\", 2);\n        i0.ɵɵtemplate(3, GmMapComponent_map_marker_3_Template, 2, 2, \"map-marker\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"height\", _r0.offsetHeight)(\"width\", _r0.offsetWidth)(\"center\", ctx.center)(\"options\", ctx.options);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.markers);\n      }\n    },\n    directives: [i1.GoogleMap, i2.NgForOf, i1.MapMarker],\n    styles: [\".gm-map google-map{width:100%;height:100%}  .gm-map google-map .map-container{position:absolute;top:0;bottom:0;right:0;left:0}.gm-map[_ngcontent-%COMP%]{position:relative;width:100%;height:100%;display:flex;align-items:center;justify-content:center}\"],\n    changeDetection: 0\n  });\n  return GmMapComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}